steps:

# uses https://github.com/afirth/cloud-builders-community/tree/master/helm,
# prefetch docker image to allow parallel deployments
- name: 'gcr.io/cloud-builders/docker'
  id: pull-helm
  args: ['pull', 'gcr.io/$PROJECT_ID/helm:latest']

- name: 'gcr.io/$PROJECT_ID/helm'
  id: external-dns
  # run in parallel
  waitFor:
    - pull-helm
  args: [
    'upgrade',
    '--install', 'external-dns',
    '--debug',
    '--force',
    '--namespace', 'external-dns',
    '-f', './external-dns/values.yaml',
    '--set', 'txtOwnerId=${_CONTAINER_CLUSTER}',
    '--set', 'domainFilters[0]=${_DOMAIN_0}',
    '--set', 'logLevel=debug',
    'stable/external-dns'
    ]
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'

- name: 'gcr.io/$PROJECT_ID/helm'
  id: nginx-ingress
  # run in parallel
  waitFor:
    - pull-helm
  args: [
    'upgrade',
    '--install', 'nginx-ingress',
    '--debug',
    '--force',
    '--namespace', 'nginx-ingress',
    '-f', './nginx-ingress/values.yaml',
    'stable/nginx-ingress'
    ]
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'

- name: 'gcr.io/$PROJECT_ID/helm'
  id: cert-manager
  # run in parallel
  waitFor:
    - pull-helm
  args: [
    'upgrade',
    '--install', 'cert-manager',
    '--debug',
    '--force',
    '--namespace', 'cert-manager',
    '-f', './cert-manager/values.yaml',
    'stable/cert-manager'
    ]
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'

- name: 'gcr.io/$PROJECT_ID/helm'
  id: cert-manager-issuers
  waitFor:
    - cert-manager
  args: [
    'upgrade',
    '--install', 'cert-manager-issuers',
    '--set', 'email=${_EMAIL}',
    '--debug',
    '--force',
    '--namespace', 'cert-manager',
    'https://github.com/afirth/cert-manager-issuers/releases/download/v0.0.4/cert-manager-issuers-v0.0.4.tgz'
    ]
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'

- name: 'gcr.io/$PROJECT_ID/helm'
  id: nfs
  waitFor:
    - pull-helm
  args: [
    'upgrade',
    '--install', 'nfs',
    '--debug',
    '--force',
    '--namespace', 'nfs',
    '--set', 'persistence.enabled=true,persistence.size=1.1Gi',
    'stable/nfs-server-provisioner'
    ]
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'

- name: 'gcr.io/$PROJECT_ID/helm'
  id: wordpress
  # run in parallel
  waitFor:
    - pull-helm
    - nfs
  entrypoint: 'bash'
  args: [ '-c', './wordpress/helm-install.sh' ]
  env:
    - 'HOSTNAME=wp.${_DOMAIN_0}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CONTAINER_CLUSTER}'
    - 'TILLER_NAMESPACE=${_TILLER_NAMESPACE}'
    - 'TILLERLESS=true'
  secretEnv:
    - 'WP_PASSWORD'

timeout: 200s

secrets:
# - kmsKeyName: projects/${PROJECT_ID}/locations/global/keyRings/${PROJECT_ID}/cryptoKeys/cloudbuild
- kmsKeyName: projects/flying-blue-mantis/locations/global/keyRings/flying-blue-mantis/cryptoKeys/cloudbuild
  secretEnv:
    WP_PASSWORD: CiQA7J4wCRIeBM6Q67ofYRHZtnr2y/i45D2HVkpzkfWCRwA5S7ASNQCQvfKNCpE8Fo9ti7uDZZeVeMG/Rm71zmyuHAg8ceQTOyE+RbjO8O3zrLrT+Sfs7QZAWOfV

